import java.io.*;
import java.util.*; 
class Graph {
    private int Vertices; 

    private LinkedList<Integer> adj_list[];
 
 
Graph(int v) 
{
 Vertices = v;
 adj_list = new LinkedList[v];
 for (int i=0; i<v; ++i)
 adj_list[i] = new LinkedList(); 
}
 
void addEdge(int v, int w) { 
adj_list[v].add(w);
 }
  
void DFS_helper(int v,boolean visited[]) { 

visited[v] = true; 
System.out.print(v+" "); 

 Iterator<Integer> i = adj_list[v].listIterator(); 
while (i.hasNext())
 {
 int n = i.next();
 if (!visited[n])
 DFS_helper(n, visited); 
}
 }
 void DFS(int v) { 

boolean visited[] = new boolean[Vertices]; 
 
DFS_helper(v, visited);
 } 
}
 class Main{
 public static void main(String args[]) { 


Graph g = new Graph(5);
      
       g.addEdge(0, 1);
       g.addEdge(0, 2); 
       g.addEdge(5, 3);
       g.addEdge(1, 2); 
       g.addEdge(2, 4); 

 System.out.println("Depth First Traversal for given graph"+ "(with 0 as starting vertex)"); 
        
 g.DFS(0); 
}
 }
